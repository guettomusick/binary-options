/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface BinaryOptionsInterface extends ethers.utils.Interface {
  functions: {
    "binToEther(uint256,uint256)": FunctionFragment;
    "buy(bool)": FunctionFragment;
    "ehterToBin(uint256,uint256)": FunctionFragment;
    "executeRound(uint32)": FunctionFragment;
    "feedPrice()": FunctionFragment;
    "getBinSupply()": FunctionFragment;
    "getCollateral()": FunctionFragment;
    "getEthPrice()": FunctionFragment;
    "getOptionsLength()": FunctionFragment;
    "getPayOut(uint32,bool)": FunctionFragment;
    "getPendingOptionsLength(address)": FunctionFragment;
    "getPlayerOptionsLength(address)": FunctionFragment;
    "getPrice(uint256,uint256)": FunctionFragment;
    "getReadyToCollect(address)": FunctionFragment;
    "getReadyToCollectOption(address,uint256)": FunctionFragment;
    "lastComputedPrice()": FunctionFragment;
    "lock(uint256)": FunctionFragment;
    "lockBalances(address)": FunctionFragment;
    "options(uint256)": FunctionFragment;
    "place(uint32,uint256,bool,uint256[])": FunctionFragment;
    "playerOptions(address,uint256)": FunctionFragment;
    "rounds(uint32)": FunctionFragment;
    "sell(uint256,bool,uint256[])": FunctionFragment;
    "token()": FunctionFragment;
    "unlock(uint256,uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "binToEther",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buy", values: [boolean]): string;
  encodeFunctionData(
    functionFragment: "ehterToBin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "feedPrice", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getBinSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEthPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayOut",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingOptionsLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayerOptionsLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReadyToCollect",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getReadyToCollectOption",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "lastComputedPrice",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "lock", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "lockBalances",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "options",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "place",
    values: [BigNumberish, BigNumberish, boolean, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "playerOptions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sell",
    values: [BigNumberish, boolean, BigNumberish[]]
  ): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BigNumberish, BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "binToEther", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ehterToBin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "feedPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBinSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingOptionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlayerOptionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReadyToCollect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReadyToCollectOption",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastComputedPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "options", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "place", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "playerOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;

  events: {
    "Bought(address)": EventFragment;
    "Collect(address)": EventFragment;
    "Execute(uint32)": EventFragment;
    "Place(address,uint64,uint32,uint32,uint128,bool)": EventFragment;
    "Sold(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Execute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Place"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sold"): EventFragment;
}

export class BinaryOptions extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: BinaryOptionsInterface;

  functions: {
    binToEther(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "binToEther(uint256,uint256)"(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    buy(
      lock: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    "buy(bool)"(
      lock: boolean,
      overrides?: PayableOverrides
    ): Promise<ContractTransaction>;

    ehterToBin(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "ehterToBin(uint256,uint256)"(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    executeRound(
      timeStamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "executeRound(uint32)"(
      timeStamp: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    feedPrice(
      overrides?: CallOverrides
    ): Promise<{
      lastPrice0Cumulative: BigNumber;
      lastBlockTimestamp: number;
      lastPrice: BigNumber;
      0: BigNumber;
      1: number;
      2: BigNumber;
    }>;

    "feedPrice()"(
      overrides?: CallOverrides
    ): Promise<{
      lastPrice0Cumulative: BigNumber;
      lastBlockTimestamp: number;
      lastPrice: BigNumber;
      0: BigNumber;
      1: number;
      2: BigNumber;
    }>;

    getBinSupply(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getBinSupply()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getCollateral(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getCollateral()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getEthPrice(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    "getEthPrice()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    getOptionsLength(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getOptionsLength()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getPayOut(
      timeStamp: BigNumberish,
      higher: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "getPayOut(uint32,bool)"(
      timeStamp: BigNumberish,
      higher: boolean,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    getPendingOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPendingOptionsLength(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getPlayerOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPlayerOptionsLength(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getPrice(
      amountTobuy: BigNumberish,
      supplyChange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getPrice(uint256,uint256)"(
      amountTobuy: BigNumberish,
      supplyChange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    getReadyToCollect(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getReadyToCollect(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getReadyToCollectOption(
      wallet: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "getReadyToCollectOption(address,uint256)"(
      wallet: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lastComputedPrice(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    "lastComputedPrice()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
    }>;

    lock(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "lock(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    lockBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      available: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "lockBalances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      available: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    options(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      execute: number;
      payout: number;
      amount: BigNumber;
      higher: boolean;
      buyer: string;
      0: BigNumber;
      1: number;
      2: number;
      3: BigNumber;
      4: boolean;
      5: string;
    }>;

    "options(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      execute: number;
      payout: number;
      amount: BigNumber;
      higher: boolean;
      buyer: string;
      0: BigNumber;
      1: number;
      2: number;
      3: BigNumber;
      4: boolean;
      5: string;
    }>;

    place(
      timeStamp: BigNumberish,
      amount: BigNumberish,
      higher: boolean,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "place(uint32,uint256,bool,uint256[])"(
      timeStamp: BigNumberish,
      amount: BigNumberish,
      higher: boolean,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    playerOptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    "playerOptions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      0: number;
    }>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      executed: boolean;
      hasOptions: boolean;
      price: BigNumber;
      higherAmount: BigNumber;
      lowerAmount: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "rounds(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      executed: boolean;
      hasOptions: boolean;
      price: BigNumber;
      higherAmount: BigNumber;
      lowerAmount: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    sell(
      amount: BigNumberish,
      fromLock: boolean,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "sell(uint256,bool,uint256[])"(
      amount: BigNumberish,
      fromLock: boolean,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    token(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    "token()"(
      overrides?: CallOverrides
    ): Promise<{
      0: string;
    }>;

    unlock(
      amount: BigNumberish,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "unlock(uint256,uint256[])"(
      amount: BigNumberish,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  binToEther(
    amount: BigNumberish,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "binToEther(uint256,uint256)"(
    amount: BigNumberish,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buy(
    lock: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  "buy(bool)"(
    lock: boolean,
    overrides?: PayableOverrides
  ): Promise<ContractTransaction>;

  ehterToBin(
    amount: BigNumberish,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "ehterToBin(uint256,uint256)"(
    amount: BigNumberish,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeRound(
    timeStamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "executeRound(uint32)"(
    timeStamp: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  feedPrice(
    overrides?: CallOverrides
  ): Promise<{
    lastPrice0Cumulative: BigNumber;
    lastBlockTimestamp: number;
    lastPrice: BigNumber;
    0: BigNumber;
    1: number;
    2: BigNumber;
  }>;

  "feedPrice()"(
    overrides?: CallOverrides
  ): Promise<{
    lastPrice0Cumulative: BigNumber;
    lastBlockTimestamp: number;
    lastPrice: BigNumber;
    0: BigNumber;
    1: number;
    2: BigNumber;
  }>;

  getBinSupply(overrides?: CallOverrides): Promise<BigNumber>;

  "getBinSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

  getCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  "getCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

  getEthPrice(
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  "getEthPrice()"(
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
    2: number;
  }>;

  getOptionsLength(overrides?: CallOverrides): Promise<BigNumber>;

  "getOptionsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

  getPayOut(
    timeStamp: BigNumberish,
    higher: boolean,
    overrides?: CallOverrides
  ): Promise<number>;

  "getPayOut(uint32,bool)"(
    timeStamp: BigNumberish,
    higher: boolean,
    overrides?: CallOverrides
  ): Promise<number>;

  getPendingOptionsLength(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPendingOptionsLength(address)"(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPlayerOptionsLength(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPlayerOptionsLength(address)"(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    amountTobuy: BigNumberish,
    supplyChange: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getPrice(uint256,uint256)"(
    amountTobuy: BigNumberish,
    supplyChange: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReadyToCollect(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  "getReadyToCollect(address)"(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<{
    0: BigNumber;
    1: BigNumber;
  }>;

  getReadyToCollectOption(
    wallet: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "getReadyToCollectOption(address,uint256)"(
    wallet: string,
    index: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  lastComputedPrice(overrides?: CallOverrides): Promise<BigNumber>;

  "lastComputedPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

  lock(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "lock(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  lockBalances(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    available: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  "lockBalances(address)"(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<{
    total: BigNumber;
    available: BigNumber;
    0: BigNumber;
    1: BigNumber;
  }>;

  options(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    price: BigNumber;
    execute: number;
    payout: number;
    amount: BigNumber;
    higher: boolean;
    buyer: string;
    0: BigNumber;
    1: number;
    2: number;
    3: BigNumber;
    4: boolean;
    5: string;
  }>;

  "options(uint256)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    price: BigNumber;
    execute: number;
    payout: number;
    amount: BigNumber;
    higher: boolean;
    buyer: string;
    0: BigNumber;
    1: number;
    2: number;
    3: BigNumber;
    4: boolean;
    5: string;
  }>;

  place(
    timeStamp: BigNumberish,
    amount: BigNumberish,
    higher: boolean,
    collectOptions: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "place(uint32,uint256,bool,uint256[])"(
    timeStamp: BigNumberish,
    amount: BigNumberish,
    higher: boolean,
    collectOptions: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  playerOptions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  "playerOptions(address,uint256)"(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    executed: boolean;
    hasOptions: boolean;
    price: BigNumber;
    higherAmount: BigNumber;
    lowerAmount: BigNumber;
    0: boolean;
    1: boolean;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  "rounds(uint32)"(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<{
    executed: boolean;
    hasOptions: boolean;
    price: BigNumber;
    higherAmount: BigNumber;
    lowerAmount: BigNumber;
    0: boolean;
    1: boolean;
    2: BigNumber;
    3: BigNumber;
    4: BigNumber;
  }>;

  sell(
    amount: BigNumberish,
    fromLock: boolean,
    collectOptions: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "sell(uint256,bool,uint256[])"(
    amount: BigNumberish,
    fromLock: boolean,
    collectOptions: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  "token()"(overrides?: CallOverrides): Promise<string>;

  unlock(
    amount: BigNumberish,
    collectOptions: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "unlock(uint256,uint256[])"(
    amount: BigNumberish,
    collectOptions: BigNumberish[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    binToEther(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "binToEther(uint256,uint256)"(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(lock: boolean, overrides?: CallOverrides): Promise<void>;

    "buy(bool)"(lock: boolean, overrides?: CallOverrides): Promise<void>;

    ehterToBin(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ehterToBin(uint256,uint256)"(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeRound(
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "executeRound(uint32)"(
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    feedPrice(
      overrides?: CallOverrides
    ): Promise<{
      lastPrice0Cumulative: BigNumber;
      lastBlockTimestamp: number;
      lastPrice: BigNumber;
      0: BigNumber;
      1: number;
      2: BigNumber;
    }>;

    "feedPrice()"(
      overrides?: CallOverrides
    ): Promise<{
      lastPrice0Cumulative: BigNumber;
      lastBlockTimestamp: number;
      lastPrice: BigNumber;
      0: BigNumber;
      1: number;
      2: BigNumber;
    }>;

    getBinSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getBinSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    "getCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEthPrice(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    "getEthPrice()"(
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
      2: number;
    }>;

    getOptionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getOptionsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPayOut(
      timeStamp: BigNumberish,
      higher: boolean,
      overrides?: CallOverrides
    ): Promise<number>;

    "getPayOut(uint32,bool)"(
      timeStamp: BigNumberish,
      higher: boolean,
      overrides?: CallOverrides
    ): Promise<number>;

    getPendingOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPendingOptionsLength(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPlayerOptionsLength(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      amountTobuy: BigNumberish,
      supplyChange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(uint256,uint256)"(
      amountTobuy: BigNumberish,
      supplyChange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReadyToCollect(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    "getReadyToCollect(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<{
      0: BigNumber;
      1: BigNumber;
    }>;

    getReadyToCollectOption(
      wallet: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReadyToCollectOption(address,uint256)"(
      wallet: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastComputedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "lastComputedPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    lock(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    "lock(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    lockBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      available: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    "lockBalances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<{
      total: BigNumber;
      available: BigNumber;
      0: BigNumber;
      1: BigNumber;
    }>;

    options(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      execute: number;
      payout: number;
      amount: BigNumber;
      higher: boolean;
      buyer: string;
      0: BigNumber;
      1: number;
      2: number;
      3: BigNumber;
      4: boolean;
      5: string;
    }>;

    "options(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      price: BigNumber;
      execute: number;
      payout: number;
      amount: BigNumber;
      higher: boolean;
      buyer: string;
      0: BigNumber;
      1: number;
      2: number;
      3: BigNumber;
      4: boolean;
      5: string;
    }>;

    place(
      timeStamp: BigNumberish,
      amount: BigNumberish,
      higher: boolean,
      collectOptions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "place(uint32,uint256,bool,uint256[])"(
      timeStamp: BigNumberish,
      amount: BigNumberish,
      higher: boolean,
      collectOptions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    playerOptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    "playerOptions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      executed: boolean;
      hasOptions: boolean;
      price: BigNumber;
      higherAmount: BigNumber;
      lowerAmount: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    "rounds(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<{
      executed: boolean;
      hasOptions: boolean;
      price: BigNumber;
      higherAmount: BigNumber;
      lowerAmount: BigNumber;
      0: boolean;
      1: boolean;
      2: BigNumber;
      3: BigNumber;
      4: BigNumber;
    }>;

    sell(
      amount: BigNumberish,
      fromLock: boolean,
      collectOptions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "sell(uint256,bool,uint256[])"(
      amount: BigNumberish,
      fromLock: boolean,
      collectOptions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    "token()"(overrides?: CallOverrides): Promise<string>;

    unlock(
      amount: BigNumberish,
      collectOptions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "unlock(uint256,uint256[])"(
      amount: BigNumberish,
      collectOptions: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Bought(from: string | null): EventFilter;

    Collect(from: string | null): EventFilter;

    Execute(timeStamp: null): EventFilter;

    Place(
      from: string | null,
      price: null,
      execute: null,
      payout: null,
      amount: null,
      higher: null
    ): EventFilter;

    Sold(from: string | null): EventFilter;
  };

  estimateGas: {
    binToEther(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "binToEther(uint256,uint256)"(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(lock: boolean, overrides?: PayableOverrides): Promise<BigNumber>;

    "buy(bool)"(
      lock: boolean,
      overrides?: PayableOverrides
    ): Promise<BigNumber>;

    ehterToBin(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "ehterToBin(uint256,uint256)"(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeRound(
      timeStamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "executeRound(uint32)"(
      timeStamp: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    feedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "feedPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getBinSupply(overrides?: CallOverrides): Promise<BigNumber>;

    "getBinSupply()"(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    "getCollateral()"(overrides?: CallOverrides): Promise<BigNumber>;

    getEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "getEthPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    getOptionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    "getOptionsLength()"(overrides?: CallOverrides): Promise<BigNumber>;

    getPayOut(
      timeStamp: BigNumberish,
      higher: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPayOut(uint32,bool)"(
      timeStamp: BigNumberish,
      higher: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPendingOptionsLength(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPlayerOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPlayerOptionsLength(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      amountTobuy: BigNumberish,
      supplyChange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getPrice(uint256,uint256)"(
      amountTobuy: BigNumberish,
      supplyChange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReadyToCollect(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReadyToCollect(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReadyToCollectOption(
      wallet: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getReadyToCollectOption(address,uint256)"(
      wallet: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lastComputedPrice(overrides?: CallOverrides): Promise<BigNumber>;

    "lastComputedPrice()"(overrides?: CallOverrides): Promise<BigNumber>;

    lock(amount: BigNumberish, overrides?: Overrides): Promise<BigNumber>;

    "lock(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<BigNumber>;

    lockBalances(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    "lockBalances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    options(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "options(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    place(
      timeStamp: BigNumberish,
      amount: BigNumberish,
      higher: boolean,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "place(uint32,uint256,bool,uint256[])"(
      timeStamp: BigNumberish,
      amount: BigNumberish,
      higher: boolean,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    playerOptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "playerOptions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    "rounds(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    sell(
      amount: BigNumberish,
      fromLock: boolean,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "sell(uint256,bool,uint256[])"(
      amount: BigNumberish,
      fromLock: boolean,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    "token()"(overrides?: CallOverrides): Promise<BigNumber>;

    unlock(
      amount: BigNumberish,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;

    "unlock(uint256,uint256[])"(
      amount: BigNumberish,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    binToEther(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "binToEther(uint256,uint256)"(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      lock: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    "buy(bool)"(
      lock: boolean,
      overrides?: PayableOverrides
    ): Promise<PopulatedTransaction>;

    ehterToBin(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "ehterToBin(uint256,uint256)"(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeRound(
      timeStamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "executeRound(uint32)"(
      timeStamp: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    feedPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "feedPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getBinSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getBinSupply()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getCollateral()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getEthPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getEthPrice()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOptionsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getOptionsLength()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPayOut(
      timeStamp: BigNumberish,
      higher: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPayOut(uint32,bool)"(
      timeStamp: BigNumberish,
      higher: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPendingOptionsLength(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPlayerOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPlayerOptionsLength(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      amountTobuy: BigNumberish,
      supplyChange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getPrice(uint256,uint256)"(
      amountTobuy: BigNumberish,
      supplyChange: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReadyToCollect(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReadyToCollect(address)"(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReadyToCollectOption(
      wallet: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getReadyToCollectOption(address,uint256)"(
      wallet: string,
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastComputedPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "lastComputedPrice()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "lock(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    lockBalances(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "lockBalances(address)"(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    options(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "options(uint256)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    place(
      timeStamp: BigNumberish,
      amount: BigNumberish,
      higher: boolean,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "place(uint32,uint256,bool,uint256[])"(
      timeStamp: BigNumberish,
      amount: BigNumberish,
      higher: boolean,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    playerOptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "playerOptions(address,uint256)"(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "rounds(uint32)"(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sell(
      amount: BigNumberish,
      fromLock: boolean,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "sell(uint256,bool,uint256[])"(
      amount: BigNumberish,
      fromLock: boolean,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "token()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unlock(
      amount: BigNumberish,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "unlock(uint256,uint256[])"(
      amount: BigNumberish,
      collectOptions: BigNumberish[],
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
