/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface BinaryOptionsInterface extends ethers.utils.Interface {
  functions: {
    "binToEther(uint256,uint256)": FunctionFragment;
    "buy()": FunctionFragment;
    "collect()": FunctionFragment;
    "collectedOptions(address,uint256)": FunctionFragment;
    "ehterToBin(uint256,uint256)": FunctionFragment;
    "executeRound(uint32)": FunctionFragment;
    "getBinSupply()": FunctionFragment;
    "getCollateral()": FunctionFragment;
    "getCollectedOptionsLength(address)": FunctionFragment;
    "getEthPrice()": FunctionFragment;
    "getOptionsLength()": FunctionFragment;
    "getPayOut(uint32,bool)": FunctionFragment;
    "getPendingOptionsLength(address)": FunctionFragment;
    "getPrice(uint256)": FunctionFragment;
    "getReadyToCollect()": FunctionFragment;
    "options(uint256)": FunctionFragment;
    "pendingOptions(address,uint256)": FunctionFragment;
    "place(uint32,uint256,bool)": FunctionFragment;
    "rounds(uint32)": FunctionFragment;
    "sell(uint256)": FunctionFragment;
    "token()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "binToEther",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "buy", values?: undefined): string;
  encodeFunctionData(functionFragment: "collect", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectedOptions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "ehterToBin",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeRound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getBinSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getCollectedOptionsLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getEthPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOptionsLength",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPayOut",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "getPendingOptionsLength",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getReadyToCollect",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "options",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pendingOptions",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "place",
    values: [BigNumberish, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "rounds",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "sell", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;

  decodeFunctionResult(functionFragment: "binToEther", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "buy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "collect", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectedOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ehterToBin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeRound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBinSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollectedOptionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEthPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOptionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPayOut", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getPendingOptionsLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReadyToCollect",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "options", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOptions",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "place", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rounds", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sell", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;

  events: {
    "Bought(address)": EventFragment;
    "Collect(address)": EventFragment;
    "Execute(uint32)": EventFragment;
    "Place(address,uint32)": EventFragment;
    "Sold(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Bought"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Collect"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Execute"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Place"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Sold"): EventFragment;
}

export class BinaryOptions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: BinaryOptionsInterface;

  functions: {
    binToEther(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    buy(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    collectedOptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    ehterToBin(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    executeRound(
      timeStamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBinSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCollateral(overrides?: CallOverrides): Promise<[BigNumber]>;

    getCollectedOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getEthPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getOptionsLength(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPayOut(
      timeStamp: BigNumberish,
      higher: boolean,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPendingOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPrice(
      amountTobuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getReadyToCollect(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    options(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        number,
        BigNumber,
        number,
        BigNumber,
        string,
        boolean
      ] & {
        price: BigNumber;
        higher: boolean;
        execute: number;
        amount: BigNumber;
        id: number;
        payout: BigNumber;
        buyer: string;
        winner: boolean;
      }
    >;

    pendingOptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[number]>;

    place(
      timeStamp: BigNumberish,
      amount: BigNumberish,
      higher: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber] & {
        executed: boolean;
        options: number;
        price: BigNumber;
        higherAmount: BigNumber;
        lowerAmount: BigNumber;
      }
    >;

    sell(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;
  };

  binToEther(
    amount: BigNumberish,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  buy(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collect(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  collectedOptions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  ehterToBin(
    amount: BigNumberish,
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  executeRound(
    timeStamp: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBinSupply(overrides?: CallOverrides): Promise<BigNumber>;

  getCollateral(overrides?: CallOverrides): Promise<BigNumber>;

  getCollectedOptionsLength(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getOptionsLength(overrides?: CallOverrides): Promise<BigNumber>;

  getPayOut(
    timeStamp: BigNumberish,
    higher: boolean,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPendingOptionsLength(
    wallet: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPrice(
    amountTobuy: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getReadyToCollect(overrides?: CallOverrides): Promise<[BigNumber, BigNumber]>;

  options(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      boolean,
      number,
      BigNumber,
      number,
      BigNumber,
      string,
      boolean
    ] & {
      price: BigNumber;
      higher: boolean;
      execute: number;
      amount: BigNumber;
      id: number;
      payout: BigNumber;
      buyer: string;
      winner: boolean;
    }
  >;

  pendingOptions(
    arg0: string,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<number>;

  place(
    timeStamp: BigNumberish,
    amount: BigNumberish,
    higher: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  rounds(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [boolean, number, BigNumber, BigNumber, BigNumber] & {
      executed: boolean;
      options: number;
      price: BigNumber;
      higherAmount: BigNumber;
      lowerAmount: BigNumber;
    }
  >;

  sell(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    binToEther(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(overrides?: CallOverrides): Promise<void>;

    collect(overrides?: CallOverrides): Promise<void>;

    collectedOptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    ehterToBin(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeRound(
      timeStamp: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBinSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    getCollectedOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getOptionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPayOut(
      timeStamp: BigNumberish,
      higher: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      amountTobuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReadyToCollect(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    options(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        boolean,
        number,
        BigNumber,
        number,
        BigNumber,
        string,
        boolean
      ] & {
        price: BigNumber;
        higher: boolean;
        execute: number;
        amount: BigNumber;
        id: number;
        payout: BigNumber;
        buyer: string;
        winner: boolean;
      }
    >;

    pendingOptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<number>;

    place(
      timeStamp: BigNumberish,
      amount: BigNumberish,
      higher: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [boolean, number, BigNumber, BigNumber, BigNumber] & {
        executed: boolean;
        options: number;
        price: BigNumber;
        higherAmount: BigNumber;
        lowerAmount: BigNumber;
      }
    >;

    sell(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Bought(from?: string | null): TypedEventFilter<[string], { from: string }>;

    Collect(from?: string | null): TypedEventFilter<[string], { from: string }>;

    Execute(
      timeStamp?: null
    ): TypedEventFilter<[number], { timeStamp: number }>;

    Place(
      from?: string | null,
      timeStamp?: null
    ): TypedEventFilter<[string, number], { from: string; timeStamp: number }>;

    Sold(from?: string | null): TypedEventFilter<[string], { from: string }>;
  };

  estimateGas: {
    binToEther(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    buy(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    collectedOptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    ehterToBin(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeRound(
      timeStamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBinSupply(overrides?: CallOverrides): Promise<BigNumber>;

    getCollateral(overrides?: CallOverrides): Promise<BigNumber>;

    getCollectedOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getEthPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getOptionsLength(overrides?: CallOverrides): Promise<BigNumber>;

    getPayOut(
      timeStamp: BigNumberish,
      higher: boolean,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPendingOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPrice(
      amountTobuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReadyToCollect(overrides?: CallOverrides): Promise<BigNumber>;

    options(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    pendingOptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    place(
      timeStamp: BigNumberish,
      amount: BigNumberish,
      higher: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    rounds(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    sell(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    binToEther(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    buy(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collect(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    collectedOptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ehterToBin(
      amount: BigNumberish,
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    executeRound(
      timeStamp: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBinSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getCollectedOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getEthPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getOptionsLength(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayOut(
      timeStamp: BigNumberish,
      higher: boolean,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPendingOptionsLength(
      wallet: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPrice(
      amountTobuy: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReadyToCollect(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    options(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pendingOptions(
      arg0: string,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    place(
      timeStamp: BigNumberish,
      amount: BigNumberish,
      higher: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    rounds(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sell(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
